{
  "openapi": "3.1.0",
  "info": {
    "title": "Task Management API",
    "description": "Backend API for Task Management Application with task scheduling, printing, and maintenance features",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/auth/token": {
      "post": {
        "tags": ["auth"],
        "summary": "Login For Access Token",
        "description": "OAuth2 compatible token login, get an access token for admin access.",
        "operationId": "login_for_access_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_for_access_token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string"
                    },
                    "token_type": {
                      "type": "string",
                      "example": "bearer"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks": {
      "get": {
        "tags": ["tasks"],
        "summary": "Read Tasks",
        "description": "Retrieve tasks.",
        "operationId": "read_tasks",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["tasks"],
        "summary": "Create New Task",
        "description": "Create new task.",
        "operationId": "create_new_task",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/due": {
      "get": {
        "tags": ["tasks"],
        "summary": "Read Due Tasks",
        "description": "Retrieve all tasks that are due within the next 24 hours.",
        "operationId": "read_due_tasks",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Task"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/tasks/random": {
      "get": {
        "tags": ["tasks"],
        "summary": "Get Random Task",
        "description": "Get a random task, prioritizing tasks that are due sooner.",
        "operationId": "get_random_task",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task Not Found"
          }
        }
      }
    },
    "/api/v1/tasks/{task_id}": {
      "get": {
        "tags": ["tasks"],
        "summary": "Read Task",
        "description": "Get task by ID.",
        "operationId": "read_task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task Not Found"
          }
        }
      },
      "delete": {
        "tags": ["tasks"],
        "summary": "Delete Task",
        "description": "Delete a task by ID.",
        "operationId": "delete_task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task Not Found"
          }
        }
      }
    },
    "/api/v1/tasks/{task_id}/start": {
      "post": {
        "tags": ["tasks"],
        "summary": "Start Task",
        "description": "Mark a task as in progress and set the started_at timestamp.",
        "operationId": "start_task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task Not Found"
          }
        }
      }
    },
    "/api/v1/tasks/{task_id}/complete": {
      "post": {
        "tags": ["tasks"],
        "summary": "Complete Task",
        "description": "Mark a task as completed and set the completed_at timestamp.",
        "operationId": "complete_task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "404": {
            "description": "Task Not Found"
          }
        }
      }
    },
    "/api/v1/tasks/{task_id}/print": {
      "get": {
        "tags": ["tasks"],
        "summary": "Print Task",
        "description": "Print a task using the specified printer (defaults to PDF).",
        "operationId": "print_task",
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "printer_type",
            "in": "query",
            "required": false,
            "description": "Type of printer to use",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Task Not Found"
          },
          "500": {
            "description": "Printer Error"
          }
        }
      }
    },
    "/api/v1/tasks/maintenance": {
      "post": {
        "tags": ["tasks"],
        "summary": "Trigger Maintenance",
        "description": "Manually trigger the task maintenance job. This will process due tasks and clean up old ones.",
        "operationId": "trigger_maintenance",
        "responses": {
          "200": {
            "description": "Successful Response"
          }
        }
      }
    },
    "/api/v1/admin/db/init": {
      "post": {
        "tags": ["admin"],
        "summary": "Initialize Database",
        "description": "Initialize database by creating all tables. Requires admin authentication.",
        "operationId": "init_db",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Database Error"
          }
        }
      }
    },
    "/api/v1/admin/db/migrate": {
      "post": {
        "tags": ["admin"],
        "summary": "Run Migrations",
        "description": "Run all pending Alembic migrations. Requires admin authentication.",
        "operationId": "run_migrations",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Migration Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Body_login_for_access_token": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "grant_type": {
            "type": "string",
            "pattern": "password",
            "nullable": true
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "scope": {
            "type": "string",
            "default": ""
          },
          "client_id": {
            "type": "string",
            "nullable": true
          },
          "client_secret": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "Task": {
        "type": "object",
        "required": ["id", "title", "description"],
        "properties": {
          "id": {
            "type": "integer"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": ["todo", "in_progress", "done"],
            "default": "todo"
          },
          "due_date": {
            "type": "string",
            "nullable": true
          },
          "reward": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "nullable": true
          },
          "started_at": {
            "type": "string",
            "nullable": true
          },
          "completed_at": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TaskCreate": {
        "type": "object",
        "required": ["title", "description"],
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": ["todo", "in_progress", "done"],
            "default": "todo"
          },
          "due_date": {
            "type": "string",
            "nullable": true
          },
          "reward": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "TaskUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "enum": ["todo", "in_progress", "done"],
            "nullable": true
          },
          "due_date": {
            "type": "string",
            "nullable": true
          },
          "reward": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "HTTPValidationError": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "required": ["loc", "msg", "type"],
        "properties": {
          "loc": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            }
          },
          "msg": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "tokenUrl": "/api/v1/auth/token",
            "scopes": {}
          }
        }
      },
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Admin-Key"
      }
    }
  }
}